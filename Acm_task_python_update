import csv
from datetime import datetime, date

class Event:
    def __init__(self, event_id, name, date, time, event_type, location=""):
        self.event_id = event_id
        self.name = name
        self.date = date  # DD-MM-YYYY
        self.time = time  # HH:MM
        self.event_type = event_type
        self.location = location

    def show(self):
        print(f"[{self.event_id}] {self.name} | {self.date} {self.time} | {self.event_type}" + (f" | {self.location}" if self.location else ""))

class EventManager:
    def __init__(self):
        self.events = []
        self.event_id_counter = 1
    
    def add_event(self, name, date, time, event_type, location=""):
        for event in self.events:
            if event.name == name and event.date == date and event.time == time:
                print("Error: Duplicate event!")
                return
        event = Event(self.event_id_counter, name, date, time, event_type, location)
        if not self.check_conflict(event):
            self.events.append(event)
            self.event_id_counter += 1
            print(f"Event '{name}' added successfully!")

    def edit_event(self, event_id, name=None, date=None, time=None, event_type=None, location=None):
        event = next((e for e in self.events if e.event_id == event_id), None)
        if event:
            event.name = name if name else event.name
            event.date = date if date else event.date
            event.time = time if time else event.time
            event.event_type = event_type if event_type else event.event_type
            event.location = location if location else event.location
            print(f"Event {event_id} updated successfully!")
        else:
            print("Error: Event not found.")
    
    def delete_event(self, event_id):
        event = next((e for e in self.events if e.event_id == event_id), None)
        if event:
            self.events.remove(event)
            print(f"Event {event_id} deleted successfully!")
        else:
            print("Error: Event not found.")
    
    def view_events(self, date=None):
        events_to_show = self.events if not date else [e for e in self.events if e.date == date]
        if events_to_show:
            for event in events_to_show:
                event.show()
        else:
            print("No events found.")

    def today_events(self):
        today = datetime.today().strftime("%d-%m-%Y")
        todays_events = [e for e in self.events if e.date == today]
        if todays_events:
            print("\nToday's Events:")
            for e in todays_events:
                e.show()
        else:
            print("No events today.")

    def search_events(self, keyword):
        keyword = keyword.lower()
        found = [e for e in self.events if keyword in e.name.lower() or keyword in e.event_type.lower()]
        if found:
            for e in found:
                e.show()
        else:
            print("No events found for search.")

    def check_conflict(self, new_event):
        for event in self.events:
            if event.date == new_event.date:
                t1 = datetime.strptime(event.time, "%H:%M")
                t2 = datetime.strptime(new_event.time, "%H:%M")
                if t1 == t2:
                    print(f"Conflict: '{event.name}' overlaps with '{new_event.name}'")
                    return True
        return False

class PersistentStorage:
    def save_events(self, events):
        with open('events.csv', 'w', newline='') as file:
            writer = csv.writer(file)
            for e in events:
                writer.writerow([e.event_id, e.name, e.date, e.time, e.event_type, e.location])
        print("Events saved.")

    def load_events(self):
        events = []
        try:
            with open('events.csv', 'r') as file:
                reader = csv.reader(file)
                for row in reader:
                    if row:  # skip empty rows
                        events.append(Event(int(row[0]), row[1], row[2], row[3], row[4], row[5]))
        except FileNotFoundError:
            pass
        return events

class Admin:
    def __init__(self, username, password):
        self.username = username
        self.password = password
    def authenticate(self, u, p):
        return self.username == u and self.password == p

def main():
    manager = EventManager()
    storage = PersistentStorage()
    manager.events = storage.load_events()

    while True:
        print("\n1. Add Event\n2. Edit Event\n3. Delete Event\n4. View Events\n5. Today's Events\n6. Search Events\n7. Save & Exit")
        choice = input("Choose: ")

        if choice == "1":
            n = input("Name: "); d = input("Date (DD-MM-YYYY): ")
            t = input("Time (HH:MM): "); ty = input("Type: ")
            l = input("Location: ")
            manager.add_event(n, d, t, ty, l)

        elif choice == "2":
            i = int(input("Event ID: "))
            n = input("New Name: ") or None
            d = input("New Date: ") or None
            t = input("New Time: ") or None
            ty = input("New Type: ") or None
            l = input("New Location: ") or None
            manager.edit_event(i, n, d, t, ty, l)

        elif choice == "3":
            i = int(input("Event ID: "))
            manager.delete_event(i)

        elif choice == "4":
            d = input("Date (leave blank for all): ") or None
            manager.view_events(d)

        elif choice == "5":
            manager.today_events()

        elif choice == "6":
            keyword = input("Enter keyword: ")
            manager.search_events(keyword)

        elif choice == "7":
            storage.save_events(manager.events)
            break

if __name__ == "__main__":
    main()
